apply plugin: 'com.jfrog.bintray'

version = '4.3.0'

dependencies {
    compile group: 'io.dropwizard.metrics', name: 'metrics-core', version: '4.0.2'
    compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.25'
}

void addManifest(Jar jar) {
    jar.manifest {
        attributes 'Implementation-Title': project.name
        attributes 'Implementation-Vendor': 'dc-square GmbH'
        attributes 'Implementation-Version': project.version
    }
}

jar {
    addManifest(it)
    exclude('META-INF/INDEX.LIST', 'META-INF/*.SF', 'META-INF/*.DSA', 'META-INF/*.RSA')
}

javadoc {
    title "HiveMQ ${project.version} Extension SDK API"

    options.charSet = 'UTF-8'
    options.encoding = 'UTF-8'

    failOnError = true

    options.addStringOption('Xdoclint:none', '-quiet')
    options.addStringOption('-html5')
    options.addBooleanOption '-no-module-directories', true

    doLast {
        javaexec {
            main = '-jar'
            args = ["$rootDir/gradle/tools/javadoc-cleaner-1.0.jar"]
        }
    }
}

task javadocJar(type: Jar) {
    group 'documentation'

    from javadoc
    classifier 'javadoc'
    addManifest(it)
    exclude('META-INF/INDEX.LIST', 'META-INF/*.SF', 'META-INF/*.DSA', 'META-INF/*.RSA')
}

task sourcesJar(type: Jar) {
    group 'build'

    from sourceSets.main.allSource
    classifier 'sources'
    addManifest(it)
    exclude('META-INF/INDEX.LIST', 'META-INF/*.SF', 'META-INF/*.DSA', 'META-INF/*.RSA')
}

publishing {
    publications {
        extensionSdk(MavenPublication) {

            from components.java
            artifact javadocJar
            artifact sourcesJar

            pom {
                name = 'HiveMQ Extension SDK'
                description = 'SDK for the development of HiveMQ extensions'
                url = 'http://www.hivemq.com/'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'cschaebe'
                        name = 'Christoph Schaebel'
                        email = 'christoph.schaebel@dc-square.de'
                        organization = 'dc-square GmbH'
                        organizationUrl = 'https://www.dc-square.de'
                    }
                    developer {
                        id = 'lbrandl'
                        name = 'Lukas Brandl'
                        email = 'lukas.brandl@dc-square.de'
                        organization = 'dc-square GmbH'
                        organizationUrl = 'https://www.dc-square.de'
                    }
                    developer {
                        id = 'flimpoeck'
                        name = 'Florian Limpoeck'
                        email = 'florian.limpoeck@dc-square.de'
                        organization = 'dc-square GmbH'
                        organizationUrl = 'https://www.dc-square.de'
                    }
                }
                scm {
                    connection = 'scm:git:git@github.com:hivemq/hivemq-extension-sdk.git'
                    developerConnection = 'scm:git:git@github.com:hivemq/hivemq-extension-sdk.git'
                    url = 'https://github.com/hivemq/hivemq-extension-sdk/tree/master'
                }
            }
        }
    }

    repositories {
        mavenLocal()
    }
}

bintray {
    user = project.hasProperty('bintrayUser') ? project.property('bintrayUser') : System.getenv('BINTRAY_USER')
    key = project.hasProperty('bintrayApiKey') ? project.property('bintrayApiKey') : System.getenv('BINTRAY_API_KEY')
    publications = ['extensionSdk'] //When uploading Maven-based publication files
    dryRun = false //[Default: false] Whether to run this as dry-run, without deploying
    publish = false //[Default: false] Whether version should be auto published after an upload
    override = false //[Default: false] Whether to override version artifacts already published
    //Package configuration. The plugin will use the repo and name properties to check if the package already exists. In that case, there's no need to configure the other package properties (like userOrg, desc, etc).
    pkg {
        repo = 'HiveMQ'
        name = 'hivemq-extension-sdk'
        userOrg = 'hivemq' //An optional organization name when the repo belongs to one of the user's orgs
        desc = 'The enterprise MQTT broker HiveMQ offers this free and open source extension SDK. This allows everyone to extend HiveMQ and add custom functionality via extensions.'
        websiteUrl = 'https://github.com/hivemq/hivemq-extension-sdk'
        vcsUrl = 'https://github.com/hivemq/hivemq-extension-sdk.git'
        licenses = ['Apache-2.0']
        labels = ['hivemq']
        publicDownloadNumbers = false
        githubRepo = 'hivemq/hivemq-extension-sdk' //Optional Github repository
        githubReleaseNotesFile = 'README.adoc' //Optional Github readme file

        //Optional version descriptor
        version {
            //Optional configuration for GPG signing
            gpg {
                sign = true //Determines whether to GPG sign the files. The default is false
            }
            //Optional configuration for Maven Central sync of the version
            mavenCentralSync {
                sync = false //[Default: true] Determines whether to sync the version to Maven Central.
                user = project.hasProperty('mavenCentralUser') ? project.property('mavenCentralUser') : System.getenv('MAVEN_CENTRAL_USER')
                //OSS user token: mandatory
                password = project.hasProperty('mavenCentralKey') ? project.property('mavenCentralKey') : System.getenv('MAVEN_CENTRAL_KEY')
                //OSS user password: mandatory
                close = '0'
                //Optional property. By default the staging repository is closed and artifacts are released to Maven Central. You can optionally turn this behaviour off (by puting 0 as value) and release the version manually.
            }
        }
    }
}
