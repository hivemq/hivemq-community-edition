plugins {
    id 'java'
    id 'java-library'
    id 'maven-publish'
    id 'com.github.johnrengelman.shadow'
    id 'com.github.hierynomus.license'
    id 'org.owasp.dependencycheck'
    id 'com.github.sgtsilvio.gradle.utf8'
    id 'com.github.sgtsilvio.gradle.metadata'

    /* Code Quality Plugins */
    id 'jacoco'
    id 'pmd'
    id 'com.github.spotbugs'
    id 'de.thetaphi.forbiddenapis'
}


/* ******************** metadata ******************** */

group 'com.hivemq'
description = 'HiveMQ CE is a Java-based open source MQTT broker that fully supports MQTT 3.x and MQTT 5'

ext.mainClassName = 'com.hivemq.HiveMQServer'

metadata {
    readableName = "HiveMQ Community Edition"
    organization {
        name = "dc-square GmbH"
        url = "https://www.hivemq.com/"
    }
    license {
        apache2()
    }
    developers {
        developer {
            it.id = "cschaebe"
            it.name = "Christoph Schaebel"
            it.email = "christoph.schaebel@hivemq.com"
        }
        developer {
            it.id = "lbrandl"
            it.name = "Lukas Brandl"
            it.email = "lukas.brandl@hivemq.com"
        }
        developer {
            it.id = "flimpoeck"
            it.name = "Florian Limpoeck"
            it.email = "florian.limpoeck@hivemq.com"
        }
        developer {
            it.id = "sauroter"
            it.name = "Georg Held"
            it.email = "georg.held@hivemq.com"
        }
        developer {
            it.id = "SgtSilvio"
            it.name = "Silvio Giebl"
            it.email = "silvio.giebl@hivemq.com"
        }
    }
    github {
        org = "hivemq"
        repo = "hivemq-community-edition"
        issues()
    }
}


/* ******************** java ******************** */

java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11

    withJavadocJar()
    withSourcesJar()
}


/* ******************** dependencies ******************** */

repositories {
    mavenCentral()
}

dependencies {

    implementation("com.hivemq:hivemq-extension-sdk:${property('hivemq-extension-sdk.version')}")

    /* netty */
    implementation("io.netty:netty-buffer:${property('netty.version')}")
    implementation("io.netty:netty-codec:${property('netty.version')}")
    implementation("io.netty:netty-codec-http:${property('netty.version')}")
    implementation("io.netty:netty-common:${property('netty.version')}")
    implementation("io.netty:netty-handler:${property('netty.version')}")
    implementation("io.netty:netty-transport:${property('netty.version')}")

    /* logging */
    implementation("org.slf4j:slf4j-api:${property('slf4j.version')}")
    implementation("org.slf4j:jul-to-slf4j:${property('slf4j.version')}")
    implementation("ch.qos.logback:logback-classic:${property('logback.version')}")

    /* bouncycastles */
    implementation("org.bouncycastle:bcprov-jdk15on:${property('bouncycastles.version')}")
    implementation("org.bouncycastle:bcpkix-jdk15on:${property('bouncycastles.version')}")

    /* rocksdb */
    implementation("org.rocksdb:rocksdbjni:${property('rocksdb.version')}")

    /* apache commons */
    implementation("commons-io:commons-io:${property('commons-io.version')}")
    implementation("org.apache.commons:commons-lang3:${property('commons-lang.version')}")

    /* xml */
    implementation("javax.xml.bind:jaxb-api:${property('jaxb-api.version')}")
    runtimeOnly("com.sun.xml.bind:jaxb-core:${property('jaxb-core.version')}")
    runtimeOnly("com.sun.xml.bind:jaxb-impl:${property('jaxb-impl.version')}")

    /* hashing */
    implementation("net.openhft:zero-allocation-hashing:${property('zero-allocation-hashing.version')}")

    /* guava */
    implementation("com.google.guava:guava:${property('guava.version')}") {
        exclude group: 'org.checkerframework', module: 'checker-qual'
        exclude group: 'com.google.errorprone', module: 'error_prone_annotations'
        exclude group: 'org.codehaus.mojo', module: 'animal-sniffer-annotations'
    }
    implementation("com.google.code.findbugs:jsr305") {
        because 'we use it as a transitive dependency of com.google.guava:guava'
    }

    /* oshi */
    implementation("com.github.oshi:oshi-core:${property('oshi.version')}")
    implementation("net.java.dev.jna:jna") {
        because 'we use it as a transitive dependency of com.github.oshi:oshi-core'
    }

    /* metrics */
    implementation("io.dropwizard.metrics:metrics-core:${property('metrics.version')}")
    implementation("io.dropwizard.metrics:metrics-jmx:${property('metrics.version')}")
    runtimeOnly("io.dropwizard.metrics:metrics-logback:${property('metrics.version')}")

    /* xodus */
    implementation("org.jetbrains.xodus:xodus-openAPI:${property('xodus.version')}") {
        exclude group: 'org.jetbrains', module: 'annotations'
    }
    implementation("org.jetbrains.xodus:xodus-environment:${property('xodus.version')}") {
        exclude group: 'org.jetbrains', module: 'annotations'
    }

    /* jackson */
    implementation("com.fasterxml.jackson.core:jackson-databind:${property('jackson.version')}")
    runtimeOnly("com.fasterxml.jackson.jaxrs:jackson-jaxrs-json-provider:${property('jackson.version')}")

    /* dependency injection */
    implementation("com.google.inject:guice:${property('guice.version')}") {
        exclude group: 'com.google.guava', module: 'guava'
    }
    implementation("javax.annotation:javax.annotation-api:${property('javax.annotation.version')}")
    implementation("javax.inject:javax.inject") {
        because 'we use it as a transitive dependency of com.google.inject:guice'
    }

    /* temporary dependencies to override transitive ones that have security vulnerabilities */
    constraints {
        implementation("org.jetbrains.kotlin:kotlin-stdlib:1.3.71")
        implementation("org.apache.commons:commons-compress:1.20")
    }

    testImplementation("junit:junit:${property('junit.version')}")
    testImplementation("org.mockito:mockito-core:${property('mockito.version')}")
    testImplementation("nl.jqno.equalsverifier:equalsverifier:${property('equalsverifier.version')}")
    testImplementation("net.jodah:concurrentunit:${property('concurrentunit.version')}")
    testImplementation("org.jboss.shrinkwrap:shrinkwrap-api:${property('shrinkwrap.version')}")
    testImplementation("net.bytebuddy:byte-buddy:${property('bytebuddy.version')}")
    testImplementation("com.github.tomakehurst:wiremock-standalone:${property('wiremock.version')}")
    testImplementation("com.github.stefanbirkner:system-rules:${property('system-rules.version')}") {
        exclude group: 'junit', module: 'junit-dep'
    }

    testRuntimeOnly("org.jboss.shrinkwrap:shrinkwrap-impl-base:${property('shrinkwrap.version')}")

    //plugins for spotbugs
    spotbugsPlugins("com.h3xstream.findsecbugs:findsecbugs-plugin:1.8.0")
}


/* ******************** test ******************** */

tasks.test {
    jvmArgs += ["-Dfile.encoding=UTF-8", "--add-opens", "java.base/java.lang=ALL-UNNAMED", "--add-opens", "java.base/java.nio=ALL-UNNAMED", "--add-opens", "java.base/sun.nio.ch=ALL-UNNAMED", "--add-opens", "jdk.management/com.sun.management.internal=ALL-UNNAMED", "--add-exports", "java.base/jdk.internal.misc=ALL-UNNAMED"]
    minHeapSize = "128m"
    maxHeapSize = "2048m"

    /* Use inclusions, exclusions from file so we can run in parallel */
    File exclusions = new File("exclusions.txt")
    if (exclusions.exists()) {
        def lines = exclusions.readLines()
        exclude lines
        logger.lifecycle("Excluded " + lines.size() + " tests for this execution")
    }

    testLogging.events("failed")
    testLogging.exceptionFormat("full")

    /* use tmpdir from gradle property or the same tmpdir as the runner */
    if (project.hasProperty("test_temp_dir")) {
        jvmArgs "-Djava.io.tmpdir=" + test_temp_dir
    } else {
        def tempDir = System.properties['java.io.tmpdir']
        if (tempDir) {
            jvmArgs "-Djava.io.tmpdir=" + tempDir
        }
    }
}


/* ******************** packaging ******************** */

ext {
    projectString = "hivemq-ce-${project.version}"
    packagingDir = "${buildDir}/package"
    packagingProjectDir = "${packagingDir}/${projectString}"
    zipDir = "${buildDir}/zip"
}

tasks.jar {
    manifest {
        attributes 'Implementation-Title': 'HiveMQ'
        attributes 'Implementation-Vendor': metadata.organization.name
        attributes 'Implementation-Version': project.version
        attributes 'HiveMQ-Version': project.version
        attributes 'Main-Class': project.mainClassName
    }
}

tasks.shadowJar {
    mergeServiceFiles()
}

tasks.register('cleanPackaging') {
    group 'packaging'

    doFirst {
        delete "${project.packagingDir}"
    }
}

tasks.register('copyXml', Copy) {
    group 'packaging'

    mustRunAfter tasks.cleanPackaging

    from "${projectDir}/src/main/resources/config.xml"
    into "${project.packagingProjectDir}/conf"
}

tasks.register('copyPackaging', Copy) {
    group 'packaging'

    mustRunAfter tasks.cleanPackaging

    from "${projectDir}/src/packaging"
    into "${project.packagingProjectDir}"

    doLast {
        new File("${project.packagingProjectDir}/data").mkdirs()
        new File("${project.packagingProjectDir}/log").mkdirs()
    }
}

tasks.register('copyJar', Copy) {
    group 'packaging'

    mustRunAfter tasks.cleanPackaging
    dependsOn tasks.shadowJar

    from tasks.shadowJar
    into "${project.packagingProjectDir}/bin"

    rename { String fileName ->
        fileName.replace(tasks.shadowJar.archiveFileName.get(), "hivemq.jar")
    }
}

tasks.register('packaging', Zip) {
    group 'packaging'

    dependsOn tasks.cleanPackaging
    dependsOn tasks.copyXml
    dependsOn tasks.copyPackaging
    dependsOn tasks.copyJar

    from "${project.packagingDir}"
    destinationDir new File(project.zipDir)
    archiveName "${projectString}.zip"
    include '**'
}

defaultTasks 'clean', 'packaging'

tasks.javadoc {
    options.addStringOption('Xdoclint:none', '-quiet')
    options.addStringOption('-html5')
    options.addBooleanOption '-no-module-directories', true

    doLast {
        javaexec {
            main = '-jar'
            args = ["${projectDir}/gradle/tools/javadoc-cleaner-1.0.jar"]
        }
    }
}


/* ******************** checks ******************** */

ext {
    jacocoVersion = '0.8.5'
    pmdVersion = '6.22.0'
    spotbugsVersion = '3.1.12'
}

if (!System.properties['java.version'].startsWith('11')) {
    throw new RuntimeException('Incompatible JRE version: ' + System.properties['java.version'] + '. Use JRE 11 instead.')
}

jacoco {
    toolVersion = jacocoVersion
}

pmd {
    toolVersion = pmdVersion
    sourceSets = [sourceSets.main]
    ignoreFailures = true
    rulePriority = 3
}

spotbugs {
    toolVersion = spotbugsVersion
    sourceSets = [sourceSets.main]
    ignoreFailures = true
    reportsDir = file("${buildDir}/reports/findbugs")
    reportLevel = 'medium'
}

dependencyCheck {
    analyzers {
        centralEnabled = false
    }
    format = 'ALL'
    scanConfigurations = ['compile']
    suppressionFile = "${projectDir}/gradle/dependency-check/suppress.xml"
    failOnError = false
}
check.dependsOn dependencyCheckAnalyze

forbiddenApis {
    bundledSignatures = ['jdk-system-out']
    ignoreFailures = false
}

forbiddenApisMain {
    exclude '**/BatchedException.class'
    exclude '**/LoggingBootstrap.class'
}

forbiddenApisTest.enabled = false


/* ******************** compliance ******************** */

license {
    header file("${rootDir}/HEADER")
    mapping('java', 'SLASHSTAR_STYLE')
}

downloadLicenses {
    ext.apache_2 = license('Apache License, Version 2.0', 'https://opensource.org/licenses/Apache-2.0')
    ext.mit = license('MIT License', 'https://opensource.org/licenses/MIT')
    ext.cddl_1_0 = license('CDDL, Version 1.0', 'https://opensource.org/licenses/CDDL-1.0')
    ext.cddl_1_1 = license('CDDL, Version 1.1', 'https://oss.oracle.com/licenses/CDDL+GPL-1.1')
    ext.lgpl_2_0 = license('LGPL, Version 2.0', 'https://opensource.org/licenses/LGPL-2.0')
    ext.lgpl_2_1 = license('LGPL, Version 2.1', 'https://opensource.org/licenses/LGPL-2.1')
    ext.lgpl_3_0 = license('LGPL, Version 3.0', 'https://opensource.org/licenses/LGPL-3.0')
    ext.epl_1_0 = license('EPL, Version 1.0', 'https://opensource.org/licenses/EPL-1.0')
    ext.epl_2_0 = license('EPL, Version 2.0', 'https://opensource.org/licenses/EPL-2.0')
    ext.edl_1_0 = license('EDL, Version 1.0', 'https://www.eclipse.org/org/documents/edl-v10.php')
    ext.bsd_3clause = license('BSD 3-Clause License', 'https://opensource.org/licenses/BSD-3-Clause')
    ext.bouncycastle = license('Bouncy Castle Licence', 'https://www.bouncycastle.org/licence.html')
    ext.w3c = license('W3C License', 'https://opensource.org/licenses/W3C')
    ext.cc0 = license('CC0', 'https://creativecommons.org/publicdomain/zero/1.0/')

    aliases = [
            (apache_2)    : ['Apache 2',
                             'Apache 2.0',
                             'Apache License 2.0',
                             'Apache License v2.0',
                             'Apache License Version 2.0',
                             'Apache License, Version 2.0',
                             'Apache License, version 2.0',
                             'The Apache License, Version 2.0',
                             'Apache Software License - Version 2.0',
                             'Apache Software License, version 2.0',
                             'The Apache Software License, Version 2.0'],
            (mit)         : ['MIT License',
                             'MIT license',
                             'The MIT License'],
            (cddl_1_0)    : ['CDDL, Version 1.0',
                             'Common Development and Distribution License 1.0',
                             'COMMON DEVELOPMENT AND DISTRIBUTION LICENSE (CDDL) Version 1.0',
                             license('CDDL', 'https://glassfish.dev.java.net/public/CDDLv1.0.html')],
            (cddl_1_1)    : ['CDDL 1.1',
                             'CDDL, Version 1.1',
                             'Common Development And Distribution License 1.1',
                             'CDDL+GPL License',
                             'CDDL + GPLv2 with classpath exception',
                             'Dual license consisting of the CDDL v1.1 and GPL v2',
                             'CDDL or GPLv2 with exceptions',
                             'CDDL/GPLv2+CE'],
            (lgpl_2_0)    : ['LGPL, Version 2.0',
                             'GNU General Public License, version 2'],
            (lgpl_2_1)    : ['LGPL, Version 2.1',
                             'LGPL, version 2.1',
                             license('GNU Lesser General Public License', 'http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html')],
            (lgpl_3_0)    : ['LGPL, Version 3.0',
                             'Lesser General Public License, version 3 or greater'],
            (epl_1_0)     : ['EPL, Version 1.0',
                             'Eclipse Public License - v 1.0',
                             'Eclipse Public License - Version 1.0',
                             license('Eclipse Public License', 'http://www.eclipse.org/legal/epl-v10.html')],
            (epl_2_0)     : ['EPL 2.0',
                             'EPL, Version 2.0'],
            (edl_1_0)     : ['EDL 1.0',
                             'EDL, Version 1.0',
                             'Eclipse Distribution License - v 1.0'],
            (bsd_3clause) : ['BSD 3-clause',
                             'BSD-3-Clause',
                             'BSD 3-Clause License',
                             '3-Clause BSD License',
                             'New BSD License',
                             license('BSD', 'http://asm.ow2.org/license.html')],
            (bouncycastle): ['Bouncy Castle Licence'],
            (w3c)         : ['W3C License',
                             'W3C Software Copyright Notice and License',
                             'The W3C Software License'],
            (cc0)         : ['CC0',
                             'Public Domain']
    ]

    dependencyConfiguration = 'runtimeClasspath'
    excludeDependencies = ["com.hivemq:hivemq-extension-sdk:${property('hivemq-extension-sdk.version')}"]
}

tasks.register('updateThirdPartyLicenses') {
    group 'license'
    dependsOn tasks.downloadLicenses
    doLast {
        javaexec {
            main = '-jar'
            args = ["${projectDir}/gradle/tools/license-third-party-tool-2.0.jar",
                    "${buildDir}/reports/license/dependency-license.xml",
                    "${projectDir}/src/packaging/third-party-licenses/licenses",
                    "${projectDir}/src/packaging/third-party-licenses/licenses.html"
            ]
        }
    }
}


/* ******************** publishing ******************** */

publishing {
    publications {
        distribution(MavenPublication) {
            artifact tasks.packaging

            artifactId 'hivemq-community-edition'
        }

        embedded(MavenPublication) {
            from components.java

            artifactId 'hivemq-community-edition-embedded'
        }
    }
}
