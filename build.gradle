plugins {
    id 'java'
    id 'application'
    id 'maven-publish'
    id 'com.github.johnrengelman.shadow'
    id 'com.github.hierynomus.license'
    id 'org.owasp.dependencycheck'
    id 'idea'

    /* Code Quality Plugins */
    id 'jacoco'
    id 'pmd'
    id 'com.github.spotbugs'
    id 'de.thetaphi.forbiddenapis'
}


/* ******************** metadata ******************** */

group 'com.hivemq'
version = '2020.3-SNAPSHOT'
description = 'HiveMQ CE is a Java-based open source MQTT broker that fully supports MQTT 3.x and MQTT 5'

mainClassName = 'com.hivemq.HiveMQServer'

ext {
    readableName = 'HiveMQ Community Edition'
    url = 'https://www.hivemq.com/'
    vendor = 'dc-square GmbH'
    githubOrg = 'hivemq'
    githubRepo = 'hivemq-community-edition'
    githubUrl = 'https://github.com/' + githubOrg + '/' + githubRepo
    scmConnection = 'scm:git:git://github.com/' + githubOrg + '/' + githubRepo + '.git'
    scmDeveloperConnection = 'scm:git:ssh://git@github.com/' + githubOrg + '/' + githubRepo + '.git'
    issuesUrl = githubUrl + '/issues'
    licenseShortName = 'Apache-2.0'
    licenseReadableName = 'The Apache License, Version 2.0'
    licenseUrl = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
}


/* ******************** java ******************** */

allprojects {
    plugins.withType(JavaPlugin) {
        sourceCompatibility = JavaVersion.VERSION_11
        targetCompatibility = JavaVersion.VERSION_11

        tasks.withType(JavaCompile) {
            options.encoding = 'UTF-8'
        }
    }
}


/* ******************** dependencies ******************** */

repositories {
    mavenCentral()
}

ext {
    // Project Dependency Versions
    bouncycastlesVersion = '1.64'
    jacksonVersion = '2.10.3'
    nettyVersion = '4.1.48.Final'
    xodusVersion = '1.2.3'
    guiceVersion = '4.2.3'
    metricsVersion = '4.0.7'

    // Additional Versions
    shrinkwrapVersion = '1.2.6'
}

dependencies {

    compile(
            /* Netty */
            [group: 'io.netty', name: 'netty-handler', version: nettyVersion],
            [group: 'io.netty', name: 'netty-codec-http', version: nettyVersion],

            /* Logging */
            [group: 'org.slf4j', name: 'jul-to-slf4j', version: '1.7.30'],

            /* bouncycastles */
            [group: 'org.bouncycastle', name: 'bcprov-jdk15on', version: bouncycastlesVersion],
            [group: 'org.bouncycastle', name: 'bcpkix-jdk15on', version: bouncycastlesVersion],

            /* jackson */
            [group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: jacksonVersion],
            [group: 'com.fasterxml.jackson.core', name: 'jackson-annotations', version: jacksonVersion],

            /* rocksdb */
            [group: 'org.rocksdb', name: 'rocksdbjni', version: '6.5.3'],

            /* apache commons */
            [group: 'commons-io', name: 'commons-io', version: '2.6'],
            [group: 'commons-codec', name: 'commons-codec', version: '1.11'],
            [group: 'commons-collections', name: 'commons-collections', version: '3.2.2'],
            [group: 'org.apache.commons', name: 'commons-lang3', version: '3.9'],

            /* xml */
            [group: 'com.sun.xml.bind', name: 'jaxb-core', version: '2.3.0.1'],
            [group: 'com.sun.xml.bind', name: 'jaxb-impl', version: '2.3.2'],
            [group: 'javax.xml.bind', name: 'jaxb-api', version: '2.2.12'],

            /* javax */
            [group: 'javax.activation', name: 'activation', version: '1.1.1'],
            [group: 'javax.validation', name: 'validation-api', version: '1.1.0.Final'],
            [group: 'javax.annotation', name: 'javax.annotation-api', version: '1.3.2'],

            /* Hashing */
            [group: 'net.openhft', name: 'zero-allocation-hashing', version: '0.11'],


            /* temporary dependencies to override transitive ones that have security vulnerabilities*/
            [group: 'org.jetbrains.kotlin', name: 'kotlin-stdlib', version: '1.3.71'],
            [group: 'org.apache.commons', name: 'commons-compress', version: '1.20'],
    )

    /* Guava */
    compile([group: 'com.google.guava', name: 'guava', version: '27.1-jre']) {
        //We don't need the HTTP Client since we are only interested in the server version
        exclude group: 'org.checkerframework', module: 'checker-qual'
        exclude group: 'com.google.errorprone', module: 'error_prone_annotations'
        exclude group: 'org.codehaus.mojo', module: 'animal-sniffer-annotations'
    }

    /* Oshi */
    compile([group: 'com.github.oshi', name: 'oshi-core', version: '3.6.2']) {
        //We don't need the HTTP Client since we are only interested in the server version
        exclude group: 'org.slf4j', module: 'slf4j-api'
    }

    compile([group: 'io.dropwizard.metrics', name: 'metrics-logback', version: metricsVersion]) {
        exclude group: 'org.slf4j', module: 'slf4j-api'
        exclude group: 'ch.qos.logback', module: 'logback-classic'
    }
    compile([group: 'io.dropwizard.metrics', name: 'metrics-core', version: metricsVersion]) {
        exclude group: 'org.slf4j', module: 'slf4j-api'
    }
    compile([group: 'io.dropwizard.metrics', name: 'metrics-jmx', version: metricsVersion]) {
        exclude group: 'org.slf4j', module: 'slf4j-api'
    }

    /* Xodus */
    compile([group: 'org.jetbrains.xodus', name: 'xodus-environment', version: xodusVersion]) {
        exclude group: 'org.slf4j', module: 'slf4j-api'
        exclude group: 'org.jetbrains', module: 'annotations'
    }
    compile([group: 'org.jetbrains.xodus', name: 'xodus-openAPI', version: xodusVersion]) {
        exclude group: 'org.slf4j', module: 'slf4j-api'
        exclude group: 'org.jetbrains', module: 'annotations'
    }
    compile([group: 'org.jetbrains.xodus', name: 'xodus-entity-store', version: xodusVersion]) {
        exclude group: 'org.slf4j', module: 'slf4j-api'
        exclude group: 'org.jetbrains', module: 'annotations'
    }
    compile([group: 'org.jetbrains.xodus', name: 'xodus-utils', version: xodusVersion]) {
        exclude group: 'org.slf4j', module: 'slf4j-api'
        exclude group: 'org.jetbrains', module: 'annotations'
    }

    /* Jackson */
    compile([group: 'com.fasterxml.jackson.datatype', name: 'jackson-datatype-guava', version: jacksonVersion]) {
        exclude group: 'com.google.guava', module: 'guava'
        exclude group: 'com.fasterxml.jackson.core', module: 'jackson-annotations'
        exclude group: 'com.fasterxml.jackson.core', module: 'jackson-core'
    }
    compile([group: 'com.fasterxml.jackson.jaxrs', name: 'jackson-jaxrs-json-provider', version: jacksonVersion]) {
        exclude group: 'com.fasterxml.jackson.core', module: 'jackson-annotations'
        exclude group: 'com.fasterxml.jackson.core', module: 'jackson-core'
    }

    /* Dependency injection */
    compile([group: 'com.google.inject', name: 'guice', version: guiceVersion]) {
        exclude group: 'com.google.guava', module: 'guava'
    }

    /* Logging */
    compile([group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.3']) {
        exclude group: 'org.slf4j', module: 'slf4j-api'
    }

    compile 'com.hivemq:hivemq-extension-sdk:4.3.0'


    testCompile(
            [group: 'junit', name: 'junit', version: '4.12'],
            [group: 'org.mockito', name: 'mockito-core', version: '2.28.2'],
            [group: 'net.jodah', name: 'concurrentunit', version: '0.4.2'],

            /*
             * Shrinkwrap API for creating JAR Archives on the fly
             */
            [group: 'org.jboss.shrinkwrap', name: 'shrinkwrap-api', version: shrinkwrapVersion],
            [group: 'net.bytebuddy', name: 'byte-buddy', version: '1.9.4'],
            [group: 'org.assertj', name: 'assertj-core', version: '2.0.0'],

            /* Hamcrest Matcher */
            [group: 'org.hamcrest', name: 'java-hamcrest', version: '2.0.0.0'],

            //additional reflection possibilities
            [group: 'org.reflections', name: 'reflections', version: '0.9.11'],

            // wiremock
            [group: 'com.github.tomakehurst', name: 'wiremock-standalone', version: '2.8.0'],

            [group: 'org.javassist', name: 'javassist', version: '3.26.0-GA'],

            [group: 'nl.jqno.equalsverifier', name: 'equalsverifier', version: '3.1.13']
    )

    testCompile([group: 'com.github.stefanbirkner', name: 'system-rules', version: '1.19.0']) {
        exclude group: 'junit', module: 'junit-dep'
    }

    /* We need some HotSpot methods to generate heapdumps from code */
    testCompile files(
            "${System.getProperty('java.home')}/../lib/sa-jdi.jar"
    )

    testRuntime(
            /*
             * Shrinkwrap Implementation for creating JAR Archives on the fly
             */
            [group: 'org.jboss.shrinkwrap', name: 'shrinkwrap-impl-base', version: shrinkwrapVersion],
    )

    //plugins for spotbugs
    spotbugsPlugins 'com.h3xstream.findsecbugs:findsecbugs-plugin:1.8.0'
}


/* ******************** test ******************** */

test {
    jvmArgs += ["-Dfile.encoding=UTF-8", "-noverify", "--add-opens", "java.base/java.lang=ALL-UNNAMED", "--add-opens", "java.base/java.nio=ALL-UNNAMED", "--add-opens", "java.base/sun.nio.ch=ALL-UNNAMED", "--add-opens", "jdk.management/com.sun.management.internal=ALL-UNNAMED", "--add-exports", "java.base/jdk.internal.misc=ALL-UNNAMED"]
    minHeapSize = "128m"
    maxHeapSize = "2048m"

    /* Use inclusions, exclusions from file so we can run in parallel */
    File exclusions = new File("exclusions.txt")
    if (exclusions.exists()) {
        def lines = exclusions.readLines()
        exclude lines
        logger.lifecycle("Excluded " + lines.size() + " tests for this execution")
    }

    testLogging.events("failed")
    testLogging.exceptionFormat("full")

    /* use tmpdir from gradle property or the same tmpdir as the runner */
    if (project.hasProperty("test_temp_dir")) {
        jvmArgs "-Djava.io.tmpdir=" + test_temp_dir
    } else {
        def tempDir = System.properties['java.io.tmpdir']
        if (tempDir) {
            jvmArgs "-Djava.io.tmpdir=" + tempDir
        }
    }
}


/* ******************** packaging ******************** */

ext {
    projectString = "hivemq-ce-${project.version}"
    packagingDir = "${buildDir}/package"
    packagingProjectDir = "${packagingDir}/${projectString}"
    zipDir = "${buildDir}/zip"
}

jar {
    manifest {
        attributes 'Implementation-Title': 'HiveMQ'
        attributes 'Implementation-Vendor': project.vendor
        attributes 'Implementation-Version': project.version
        attributes 'HiveMQ-Version': project.version
        attributes 'Main-Class': project.mainClassName
    }
}

shadowJar {
    mergeServiceFiles()
}

task cleanPackaging {
    group 'packaging'

    doFirst {
        delete "${project.packagingDir}"
    }
}

task copyXml(type: Copy) {
    group 'packaging'

    mustRunAfter tasks.cleanPackaging

    from "${projectDir}/src/main/resources/config.xml"
    into "${project.packagingProjectDir}/conf"
}

task copyPackaging(type: Copy) {
    group 'packaging'

    mustRunAfter tasks.cleanPackaging

    from "${projectDir}/src/packaging"
    into "${project.packagingProjectDir}"

    doLast {
        new File("${project.packagingProjectDir}/data").mkdirs()
        new File("${project.packagingProjectDir}/log").mkdirs()
    }
}

task copyJar(type: Copy) {
    group 'packaging'

    mustRunAfter tasks.cleanPackaging
    dependsOn tasks.shadowJar

    from tasks.shadowJar
    into "${project.packagingProjectDir}/bin"

    rename { String fileName ->
        fileName.replace(tasks.shadowJar.archiveFileName.get(), "hivemq.jar")
    }
}

task packaging(type: Zip) {
    group 'packaging'

    dependsOn tasks.cleanPackaging
    dependsOn tasks.copyXml
    dependsOn tasks.copyPackaging
    dependsOn tasks.copyJar

    from "${project.packagingDir}"
    destinationDir new File(project.zipDir)
    archiveName "${projectString}.zip"
    include '**'
}

defaultTasks 'clean', 'packaging'

javadoc {
    options.charSet = 'UTF-8'
    options.encoding = 'UTF-8'

    options.addStringOption('Xdoclint:none', '-quiet')
    options.addStringOption('-html5')
    options.addBooleanOption '-no-module-directories', true

    doLast {
        javaexec {
            main = '-jar'
            args = ["${projectDir}/gradle/tools/javadoc-cleaner-1.0.jar"]
        }
    }
}


/* ******************** checks ******************** */

ext {
    jacocoVersion = '0.8.5'
    pmdVersion = '6.22.0'
    spotbugsVersion = '3.1.12'
}

compileJava {
    if (!System.properties['java.version'].startsWith('11')) {
        throw new RuntimeException('Incompatible JRE version: ' + System.properties['java.version'] + '. Use JRE 11 instead.')
    }
}

jacoco {
    toolVersion = jacocoVersion
}

pmd {
    toolVersion = pmdVersion
    sourceSets = [sourceSets.main]
    ignoreFailures = true
    rulePriority = 3
}

spotbugs {
    toolVersion = spotbugsVersion
    sourceSets = [sourceSets.main]
    ignoreFailures = true
    reportsDir = file("${buildDir}/reports/findbugs")
    reportLevel = 'medium'
}

dependencyCheck {
    analyzers {
        centralEnabled = false
    }
    format = 'ALL'
    scanConfigurations = ['compile']
    suppressionFile = "${projectDir}/gradle/dependency-check/suppress.xml"
    failOnError = false
}
check.dependsOn dependencyCheckAnalyze

forbiddenApis {
    bundledSignatures = ['jdk-system-out']
    ignoreFailures = false
}

forbiddenApisMain {
    exclude '**/BatchedException.class'
    exclude '**/LoggingBootstrap.class'
}

forbiddenApisTest.enabled = false


/* ******************** compliance ******************** */

allprojects {
    license {
        header file("${rootDir}/HEADER")
        mapping {
            java = 'SLASHSTAR_STYLE'
        }
    }
}

downloadLicenses {
    ext.apacheTwo = license('Apache License, Version 2.0', 'http://opensource.org/licenses/Apache-2.0')
    ext.cddlOnePointZero = license('CDDL, Version 1.0', 'http://glassfish.java.net/public/CDDLv1.0.html')
    ext.cddlOnePointOne = license('CDDL, Version 1.1', 'http://glassfish.java.net/public/CDDL+GPL_1_1.html')
    ext.lgplTwoPointOne = license('LGPL, Version 2.1', 'http://www.gnu.org/licenses/lgpl-2.1.html')
    ext.eplOnePointZero = license('EPL, Version 1.0', 'http://www.eclipse.org/legal/epl-v10.html')

    aliases = [
            (apacheTwo)       : ['Apache License 2', 'Apache Software License - Version 2.0', 'The Apache Software License, Version 2.0', 'Apache 2', 'Apache License Version 2.0', 'Apache License, Version 2.0', 'Apache License 2.0', 'Apache 2.0', 'The Apache License, Version 2.0', license('Apache License', 'http://www.apache.org/licenses/LICENSE-2.0')],
            (cddlOnePointZero): ['Common Development and Distribution License (CDDL) v1.0', 'COMMON DEVELOPMENT AND DISTRIBUTION LICENSE (CDDL) Version 1.0'],
            (cddlOnePointOne) : ['CDDL 1.1'],
            (lgplTwoPointOne) : ['LGPL 2.1', 'GNU Lesser General Public License'],
            (eplOnePointZero) : ['Eclipse Public License - Version 1.0', 'Eclipse Public License', 'Eclipse Public License - v 1.0']
    ]
}

task updateThirdPartyLicenses {
    group 'license'
    dependsOn tasks.downloadLicenses
    doLast {
        javaexec {
            main = '-jar'
            args = ["${projectDir}/gradle/tools/license-third-party-tool-1.0.jar",
                    "${buildDir}/reports/license/dependency-license.xml",
                    "${projectDir}/src/packaging/third-party-licenses/licenses",
                    "${projectDir}/src/packaging/third-party-licenses/licenses.html"
            ]
        }
    }
}


/* ******************** publishing ******************** */

void addManifest(Jar jar) {
    jar.manifest {
        attributes 'Implementation-Title': project.name
        attributes 'Implementation-Vendor': 'HiveMQ'
        attributes 'Implementation-Version': project.version
    }
}

task embeddedJar(type: Jar) {
    group 'build'

    from sourceSets.main.output
    addManifest(it)
    exclude('META-INF/INDEX.LIST', 'META-INF/*.SF', 'META-INF/*.DSA', 'META-INF/*.RSA')
}

task sourceJar(type: Jar) {
    from sourceSets.main.allJava
}

publishing {
    publications {
        distribution(MavenPublication) {

            artifact tasks.packaging
            artifactId 'hivemq-community-edition'
            pom {
                name = project.readableName
                description = project.description
                url = project.url
                licenses {
                    license {
                        name = project.licenseReadableName
                        url = project.licenseUrl
                    }
                }
                developers {
                    developer {
                        id = 'cschaebe'
                        name = 'Christoph Schaebel'
                        email = 'christoph.schaebel@hivemq.com'
                        organization = project.vendor
                        organizationUrl = project.url
                    }
                    developer {
                        id = 'lbrandl'
                        name = 'Lukas Brandl'
                        email = 'lukas.brandl@hivemq.com'
                        organization = project.vendor
                        organizationUrl = project.url
                    }
                    developer {
                        id = 'flimpoeck'
                        name = 'Florian Limpoeck'
                        email = 'florian.limpoeck@hivemq.com'
                        organization = project.vendor
                        organizationUrl = project.url
                    }
                }
                scm {
                    connection = project.scmConnection
                    developerConnection = project.scmDeveloperConnection
                    url = project.githubUrl
                }
                issueManagement {
                    system = 'github'
                    url = project.issuesUrl
                }
            }

            embedded(MavenPublication) {
                from components.java
                artifacts = [embeddedJar]
                artifactId 'hivemq-community-edition-embedded'
                pom {
                    name = 'HiveMQ Community Edition Embedded'
                    description = 'HiveMQ Community Edition Embedded'
                    url = 'http://www.hivemq.com/'
                    licenses {
                        license {
                            name = 'The Apache License, Version 2.0'
                            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        }
                    }
                    developers {
                        developer {
                            id = 'cschaebe'
                            name = 'Christoph Schaebel'
                            email = 'christoph.schaebel@hivemq.com'
                            organization = 'HiveMQ GmbH'
                            organizationUrl = 'https://www.hivemq.com'
                        }
                        developer {
                            id = 'lbrandl'
                            name = 'Lukas Brandl'
                            email = 'lukas.brandl@hivemq.com'
                            organization = 'HiveMQ GmbH'
                            organizationUrl = 'https://www.hivemq.com'
                        }
                        developer {
                            id = 'flimpoeck'
                            name = 'Florian Limpoeck'
                            email = 'florian.limpoeck@dc-square.de'
                            organization = 'HiveMQ GmbH'
                            organizationUrl = 'https://www.hivemq.com'
                        }
                        developer {
                            id = 'sauroter'
                            name = 'Georg Held'
                            email = 'georg.held@hivemq.com'
                            organization = 'HiveMQ GmbH'
                            organizationUrl = 'https://www.hivemq.com'
                        }

                        developer {
                            id = 'SgtSilvio'
                            name = 'Silvio Giebl'
                            email = 'silvio.giebl@hivemq.com'
                            organization = 'HiveMQ GmbH'
                            organizationUrl = 'https://www.hivemq.com'
                        }
                    }
                    scm {
                        connection = 'scm:git:git@github.com:hivemq/hivemq-community-edition.git'
                        developerConnection = 'scm:git:git@github.com:hivemq/hivemq-community-edition.git'
                        url = 'https://github.com/hivemq/hivemq-community-edition/tree/master'
                    }

                    pom.withXml {
                asNode().dependencies.dependency.each { dep ->
                    if (dep.artifactId.last().value().last() in ["logback-classic", "slf4j-log4j12"]) {
                        assert dep.parent().remove(dep)
                    }
                }
            }
        }

        sources(MavenPublication) {
            from components.java
            artifactId 'hivemq-community-edition-embedded'

            artifact sourceJar {
                classifier "sources"
            }
        }
    }
}


/* ******************** ide ******************** */

idea {
    module {
        downloadJavadoc = true
        downloadSources = true
    }
}
