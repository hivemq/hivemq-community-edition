plugins {
    id 'java'
    id 'java-library'
    id 'maven-publish'
    id 'com.github.johnrengelman.shadow'
    id 'com.github.hierynomus.license'
    id 'org.owasp.dependencycheck'
    id 'com.github.sgtsilvio.gradle.metadata'

    /* Code Quality Plugins */
    id 'jacoco'
    id 'pmd'
    id 'com.github.spotbugs'
    id 'de.thetaphi.forbiddenapis'
}


/* ******************** metadata ******************** */

group 'com.hivemq'
description = 'HiveMQ CE is a Java-based open source MQTT broker that fully supports MQTT 3.x and MQTT 5'

ext.mainClassName = 'com.hivemq.HiveMQServer'

metadata {
    readableName = "HiveMQ Community Edition"
    organization {
        name = "dc-square GmbH"
        url = "https://www.hivemq.com/"
    }
    license {
        apache2()
    }
    developers {
        developer {
            it.id = "cschaebe"
            it.name = "Christoph Schaebel"
            it.email = "christoph.schaebel@hivemq.com"
        }
        developer {
            it.id = "lbrandl"
            it.name = "Lukas Brandl"
            it.email = "lukas.brandl@hivemq.com"
        }
        developer {
            it.id = "flimpoeck"
            it.name = "Florian Limpoeck"
            it.email = "florian.limpoeck@hivemq.com"
        }
        developer {
            it.id = "sauroter"
            it.name = "Georg Held"
            it.email = "georg.held@hivemq.com"
        }
        developer {
            it.id = "SgtSilvio"
            it.name = "Silvio Giebl"
            it.email = "silvio.giebl@hivemq.com"
        }
    }
    github {
        org = "hivemq"
        repo = "hivemq-community-edition"
        issues()
    }
}


/* ******************** java ******************** */

java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11

    withJavadocJar()
    withSourcesJar()
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}


/* ******************** dependencies ******************** */

repositories {
    mavenCentral()
}

dependencies {

    implementation("com.hivemq:hivemq-extension-sdk:${property('hivemq-extension-sdk.version')}")

    /* netty */
    implementation("io.netty:netty-handler:${property('netty.version')}")
    implementation("io.netty:netty-codec-http:${property('netty.version')}")

    /* logging */
    implementation("org.slf4j:jul-to-slf4j:${property('slf4j.version')}")
    implementation("ch.qos.logback:logback-classic:${property('logback.version')}") {
        exclude group: 'org.slf4j', module: 'slf4j-api'
    }

    /* bouncycastles */
    implementation("org.bouncycastle:bcprov-jdk15on:${property('bouncycastles.version')}")
    implementation("org.bouncycastle:bcpkix-jdk15on:${property('bouncycastles.version')}")

    /* rocksdb */
    implementation("org.rocksdb:rocksdbjni:${property('rocksdb.version')}")

    /* apache commons */
    implementation("commons-io:commons-io:${property('commons-io.version')}")
    implementation("commons-codec:commons-codec:${property('commons-codec.version')}")
    implementation("commons-collections:commons-collections:${property('commons-collections.version')}")
    implementation("org.apache.commons:commons-lang3:${property('commons-lang.version')}")

    /* xml */
    implementation("com.sun.xml.bind:jaxb-core:${property('jaxb-core.version')}")
    implementation("com.sun.xml.bind:jaxb-impl:${property('jaxb-impl.version')}")
    implementation("javax.xml.bind:jaxb-api:${property('jaxb-api.version')}")

    /* javax */
    implementation("javax.activation:activation:${property('javax.activation.version')}")
    implementation("javax.validation:validation-api:${property('javax.validation.version')}")
    implementation("javax.annotation:javax.annotation-api:${property('javax.annotation.version')}")

    /* hashing */
    implementation("net.openhft:zero-allocation-hashing:${property('zero-allocation-hashing.version')}")

    /* temporary dependencies to override transitive ones that have security vulnerabilities*/
    implementation("org.jetbrains.kotlin:kotlin-stdlib:1.3.71")
    implementation("org.apache.commons:commons-compress:1.20")

    /* guava */
    implementation("com.google.guava:guava:${property('guava.version')}") {
        //We don't need the HTTP Client since we are only interested in the server version
        exclude group: 'org.checkerframework', module: 'checker-qual'
        exclude group: 'com.google.errorprone', module: 'error_prone_annotations'
        exclude group: 'org.codehaus.mojo', module: 'animal-sniffer-annotations'
    }

    /* oshi */
    implementation("com.github.oshi:oshi-core:${property('oshi.version')}") {
        //We don't need the HTTP Client since we are only interested in the server version
        exclude group: 'org.slf4j', module: 'slf4j-api'
    }

    /* metrics */
    implementation("io.dropwizard.metrics:metrics-logback:${property('metrics.version')}") {
        exclude group: 'org.slf4j', module: 'slf4j-api'
        exclude group: 'ch.qos.logback', module: 'logback-classic'
    }
    implementation("io.dropwizard.metrics:metrics-core:${property('metrics.version')}") {
        exclude group: 'org.slf4j', module: 'slf4j-api'
    }
    implementation("io.dropwizard.metrics:metrics-jmx:${property('metrics.version')}") {
        exclude group: 'org.slf4j', module: 'slf4j-api'
    }

    /* xodus */
    implementation("org.jetbrains.xodus:xodus-environment:${property('xodus.version')}") {
        exclude group: 'org.slf4j', module: 'slf4j-api'
        exclude group: 'org.jetbrains', module: 'annotations'
    }
    implementation("org.jetbrains.xodus:xodus-openAPI:${property('xodus.version')}") {
        exclude group: 'org.slf4j', module: 'slf4j-api'
        exclude group: 'org.jetbrains', module: 'annotations'
    }
    implementation("org.jetbrains.xodus:xodus-entity-store:${property('xodus.version')}") {
        exclude group: 'org.slf4j', module: 'slf4j-api'
        exclude group: 'org.jetbrains', module: 'annotations'
    }
    implementation("org.jetbrains.xodus:xodus-utils:${property('xodus.version')}") {
        exclude group: 'org.slf4j', module: 'slf4j-api'
        exclude group: 'org.jetbrains', module: 'annotations'
    }

    /* jackson */
    implementation("com.fasterxml.jackson.core:jackson-core:${property('jackson.version')}")
    implementation("com.fasterxml.jackson.core:jackson-annotations:${property('jackson.version')}")
    implementation("com.fasterxml.jackson.datatype:jackson-datatype-guava:${property('jackson.version')}") {
        exclude group: 'com.google.guava', module: 'guava'
        exclude group: 'com.fasterxml.jackson.core', module: 'jackson-annotations'
        exclude group: 'com.fasterxml.jackson.core', module: 'jackson-core'
    }
    implementation("com.fasterxml.jackson.jaxrs:jackson-jaxrs-json-provider:${property('jackson.version')}") {
        exclude group: 'com.fasterxml.jackson.core', module: 'jackson-annotations'
        exclude group: 'com.fasterxml.jackson.core', module: 'jackson-core'
    }

    /* dependency injection */
    implementation("com.google.inject:guice:${property('guice.version')}") {
        exclude group: 'com.google.guava', module: 'guava'
    }

    testImplementation("junit:junit:${property('junit.version')}")
    testImplementation("org.mockito:mockito-core:${property('mockito.version')}")
    testImplementation("nl.jqno.equalsverifier:equalsverifier:${property('equalsverifier.version')}")
    testImplementation("net.jodah:concurrentunit:${property('concurrentunit.version')}")
    testImplementation("org.jboss.shrinkwrap:shrinkwrap-api:${property('shrinkwrap.version')}")
    testImplementation("net.bytebuddy:byte-buddy:${property('bytebuddy.version')}")
    testImplementation("com.github.tomakehurst:wiremock-standalone:${property('wiremock.version')}")
    testImplementation("com.github.stefanbirkner:system-rules:${property('system-rules.version')}") {
        exclude group: 'junit', module: 'junit-dep'
    }

    /* We need some HotSpot methods to generate heapdumps from code */
    testImplementation files("${System.getProperty('java.home')}/../lib/sa-jdi.jar")

    testRuntimeOnly("org.jboss.shrinkwrap:shrinkwrap-impl-base:${property('shrinkwrap.version')}")

    //plugins for spotbugs
    spotbugsPlugins("com.h3xstream.findsecbugs:findsecbugs-plugin:1.8.0")
}


/* ******************** test ******************** */

tasks.test {
    jvmArgs += ["-Dfile.encoding=UTF-8", "-noverify", "--add-opens", "java.base/java.lang=ALL-UNNAMED", "--add-opens", "java.base/java.nio=ALL-UNNAMED", "--add-opens", "java.base/sun.nio.ch=ALL-UNNAMED", "--add-opens", "jdk.management/com.sun.management.internal=ALL-UNNAMED", "--add-exports", "java.base/jdk.internal.misc=ALL-UNNAMED"]
    minHeapSize = "128m"
    maxHeapSize = "2048m"

    /* Use inclusions, exclusions from file so we can run in parallel */
    File exclusions = new File("exclusions.txt")
    if (exclusions.exists()) {
        def lines = exclusions.readLines()
        exclude lines
        logger.lifecycle("Excluded " + lines.size() + " tests for this execution")
    }

    testLogging.events("failed")
    testLogging.exceptionFormat("full")

    /* use tmpdir from gradle property or the same tmpdir as the runner */
    if (project.hasProperty("test_temp_dir")) {
        jvmArgs "-Djava.io.tmpdir=" + test_temp_dir
    } else {
        def tempDir = System.properties['java.io.tmpdir']
        if (tempDir) {
            jvmArgs "-Djava.io.tmpdir=" + tempDir
        }
    }
}


/* ******************** packaging ******************** */

ext {
    projectString = "hivemq-ce-${project.version}"
    packagingDir = "${buildDir}/package"
    packagingProjectDir = "${packagingDir}/${projectString}"
    zipDir = "${buildDir}/zip"
}

tasks.jar {
    manifest {
        attributes 'Implementation-Title': 'HiveMQ'
        attributes 'Implementation-Vendor': metadata.organization.name
        attributes 'Implementation-Version': project.version
        attributes 'HiveMQ-Version': project.version
        attributes 'Main-Class': project.mainClassName
    }
}

tasks.shadowJar {
    mergeServiceFiles()
}

tasks.register('cleanPackaging') {
    group 'packaging'

    doFirst {
        delete "${project.packagingDir}"
    }
}

tasks.register('copyXml', Copy) {
    group 'packaging'

    mustRunAfter tasks.cleanPackaging

    from "${projectDir}/src/main/resources/config.xml"
    into "${project.packagingProjectDir}/conf"
}

tasks.register('copyPackaging', Copy) {
    group 'packaging'

    mustRunAfter tasks.cleanPackaging

    from "${projectDir}/src/packaging"
    into "${project.packagingProjectDir}"

    doLast {
        new File("${project.packagingProjectDir}/data").mkdirs()
        new File("${project.packagingProjectDir}/log").mkdirs()
    }
}

tasks.register('copyJar', Copy) {
    group 'packaging'

    mustRunAfter tasks.cleanPackaging
    dependsOn tasks.shadowJar

    from tasks.shadowJar
    into "${project.packagingProjectDir}/bin"

    rename { String fileName ->
        fileName.replace(tasks.shadowJar.archiveFileName.get(), "hivemq.jar")
    }
}

tasks.register('packaging', Zip) {
    group 'packaging'

    dependsOn tasks.cleanPackaging
    dependsOn tasks.copyXml
    dependsOn tasks.copyPackaging
    dependsOn tasks.copyJar

    from "${project.packagingDir}"
    destinationDir new File(project.zipDir)
    archiveName "${projectString}.zip"
    include '**'
}

defaultTasks 'clean', 'packaging'

tasks.javadoc {
    options.charSet = 'UTF-8'
    options.encoding = 'UTF-8'

    options.addStringOption('Xdoclint:none', '-quiet')
    options.addStringOption('-html5')
    options.addBooleanOption '-no-module-directories', true

    doLast {
        javaexec {
            main = '-jar'
            args = ["${projectDir}/gradle/tools/javadoc-cleaner-1.0.jar"]
        }
    }
}


/* ******************** checks ******************** */

ext {
    jacocoVersion = '0.8.5'
    pmdVersion = '6.22.0'
    spotbugsVersion = '3.1.12'
}

if (!System.properties['java.version'].startsWith('11')) {
    throw new RuntimeException('Incompatible JRE version: ' + System.properties['java.version'] + '. Use JRE 11 instead.')
}

jacoco {
    toolVersion = jacocoVersion
}

pmd {
    toolVersion = pmdVersion
    sourceSets = [sourceSets.main]
    ignoreFailures = true
    rulePriority = 3
}

spotbugs {
    toolVersion = spotbugsVersion
    sourceSets = [sourceSets.main]
    ignoreFailures = true
    reportsDir = file("${buildDir}/reports/findbugs")
    reportLevel = 'medium'
}

dependencyCheck {
    analyzers {
        centralEnabled = false
    }
    format = 'ALL'
    scanConfigurations = ['compile']
    suppressionFile = "${projectDir}/gradle/dependency-check/suppress.xml"
    failOnError = false
}
check.dependsOn dependencyCheckAnalyze

forbiddenApis {
    bundledSignatures = ['jdk-system-out']
    ignoreFailures = false
}

forbiddenApisMain {
    exclude '**/BatchedException.class'
    exclude '**/LoggingBootstrap.class'
}

forbiddenApisTest.enabled = false


/* ******************** compliance ******************** */

license {
    header file("${rootDir}/HEADER")
    mapping('java', 'SLASHSTAR_STYLE')
}

downloadLicenses {
    ext.apacheTwo = license('Apache License, Version 2.0', 'http://opensource.org/licenses/Apache-2.0')
    ext.cddlOnePointZero = license('CDDL, Version 1.0', 'http://glassfish.java.net/public/CDDLv1.0.html')
    ext.cddlOnePointOne = license('CDDL, Version 1.1', 'http://glassfish.java.net/public/CDDL+GPL_1_1.html')
    ext.lgplTwoPointOne = license('LGPL, Version 2.1', 'http://www.gnu.org/licenses/lgpl-2.1.html')
    ext.eplOnePointZero = license('EPL, Version 1.0', 'http://www.eclipse.org/legal/epl-v10.html')

    aliases = [
            (apacheTwo)       : ['Apache License 2', 'Apache Software License - Version 2.0', 'The Apache Software License, Version 2.0', 'Apache 2', 'Apache License Version 2.0', 'Apache License, Version 2.0', 'Apache License 2.0', 'Apache 2.0', 'The Apache License, Version 2.0', license('Apache License', 'http://www.apache.org/licenses/LICENSE-2.0')],
            (cddlOnePointZero): ['Common Development and Distribution License (CDDL) v1.0', 'COMMON DEVELOPMENT AND DISTRIBUTION LICENSE (CDDL) Version 1.0'],
            (cddlOnePointOne) : ['CDDL 1.1'],
            (lgplTwoPointOne) : ['LGPL 2.1', 'GNU Lesser General Public License'],
            (eplOnePointZero) : ['Eclipse Public License - Version 1.0', 'Eclipse Public License', 'Eclipse Public License - v 1.0']
    ]
}

tasks.register('updateThirdPartyLicenses') {
    group 'license'
    dependsOn tasks.downloadLicenses
    doLast {
        javaexec {
            main = '-jar'
            args = ["${projectDir}/gradle/tools/license-third-party-tool-1.0.jar",
                    "${buildDir}/reports/license/dependency-license.xml",
                    "${projectDir}/src/packaging/third-party-licenses/licenses",
                    "${projectDir}/src/packaging/third-party-licenses/licenses.html"
            ]
        }
    }
}


/* ******************** publishing ******************** */

publishing {
    publications {
        distribution(MavenPublication) {
            artifact tasks.packaging

            artifactId 'hivemq-community-edition'
        }

        embedded(MavenPublication) {
            from components.java

            artifactId 'hivemq-community-edition-embedded'
            }
        }
    }
